%implements "chartSource" "C"
%function ChartConfig(block, system) void
  %createrecord chartConfiguration { ...
          executeAtInitialization  1 ...
  }
  %return chartConfiguration
%endfunction
%function ChartDefines(block,system) void
   %openfile chartConstBuf
         #define %<block.SymbolMapping.IN_NO_ACTIVE_CHILD> (0)
         #define %<block.SymbolMapping.IN_INIT> (1)
         #define %<block.SymbolMapping.IN_INIT_ACK> (2)
         #define %<block.SymbolMapping.IN_OPERATION> (3)
         #define %<block.SymbolMapping.IN_STOPPED> (2)
         #define %<block.SymbolMapping.IN_PRIMITIVE> (4)
         #define %<block.SymbolMapping.IN_CONTROLLER> (3)
         #define %<block.SymbolMapping.IN_MOVING> (1)
         #define %<block.SymbolMapping.IN_HOLD_main> (1)
         #define %<block.SymbolMapping.IN_HOLD> (1)
         #define %<block.SymbolMapping.IN_POSITIVE_MOV_SEG_1> (3)
         #define %<block.SymbolMapping.IN_NEGATIVE_MOV_SEG_1> (1)
         #define %<block.SymbolMapping.IN_POSITIVE_MOV_SEG_2> (4)
         #define %<block.SymbolMapping.IN_NEGATIVE_MOV_SEG_2> (2)
         #define %<block.SymbolMapping.IN_CONFIG> (2)
         #define %<block.SymbolMapping.IN_BLUETOOTH> (1)
         #define %<block.SymbolMapping.IN_TRAJECTORY> (2)
         #define %<block.SymbolMapping.IN_HOLD_wait> (2)
   %closefile chartConstBuf
   %return chartConstBuf
%endfunction %% ChartDefines
%function ChartFunctions(block,system) void
   %openfile chartFcnsBuf
     
         
         
         
         
         static void %<block.SymbolMapping.INIT_ACK>(%<LibSFPassThruPairs(block,1)> %<LibSFPassThruDummy(block)>);
         static void %<block.SymbolMapping.CONTROLLER>(%<LibSFPassThruPairs(block,1)> %<LibSFPassThruDummy(block)>);
            
            
            
            static void %<block.SymbolMapping.INIT_ACK>(%<LibSFPassThruPairs(block,1)> %<LibSFPassThruDummy(block)>)
{
%<LibSFChartInstance(block)>is_c1_MPC_framework = (uint8_T)%<block.SymbolMapping.IN_OPERATION>;
%<LibSFOutputs(block, 7, 0)> = 0.0F;
%<LibSFOutputs(block, 12, 0)> = 0U;
%<LibSFChartInstance(block)>is_OPERATION = (uint8_T)%<block.SymbolMapping.IN_PRIMITIVE>;
%<LibSFOutputs(block, 9, 0)> = 1U;
%<LibSFChartInstance(block)>is_PRIMITIVE = (uint8_T)%<block.SymbolMapping.IN_STOPPED>;
%<LibSFOutputs(block, 5, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
%<LibSFOutputs(block, 6, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
%<LibSFOutputs(block, 8, 0)> = 1.0F;
}
            static void %<block.SymbolMapping.CONTROLLER>(%<LibSFPassThruPairs(block,1)> %<LibSFPassThruDummy(block)>)
{
if(%<LibSFInputs(block, 3, 0)> == 8.0F) {
switch(%<LibSFChartInstance(block)>is_CONTROLLER) {
case %<block.SymbolMapping.IN_HOLD>:
%<LibSFChartInstance(block)>is_HOLD = (uint8_T)%<block.SymbolMapping.IN_NO_ACTIVE_CHILD>;
%<LibSFChartInstance(block)>is_CONTROLLER = (uint8_T)%<block.SymbolMapping.IN_NO_ACTIVE_CHILD>;
break;
case %<block.SymbolMapping.IN_TRAJECTORY>:
%<LibSFOutputs(block, 5, 0)> = %<FcnSFGetDSMElementValue(block, 0, "0", 1, "real32_T")>;
%<LibSFOutputs(block, 6, 0)> = %<FcnSFGetDSMElementValue(block, 1, "0", 1, "real32_T")>;
%<FcnSFSetDSMElementValue(block, 2, "0", 1, "uint8_T", "MAX_uint8_T")>%<LibSFOutputs(block, 12, 0)> = 0U;
%<LibSFChartInstance(block)>is_CONTROLLER = (uint8_T)%<block.SymbolMapping.IN_NO_ACTIVE_CHILD>;
break;
}
%<LibSFChartInstance(block)>is_OPERATION = (uint8_T)%<block.SymbolMapping.IN_BLUETOOTH>;
%<LibSFOutputs(block, 9, 0)> = 4U;
%<LibSFOutputs(block, 5, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
%<LibSFOutputs(block, 6, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
} else if(%<LibSFInputs(block, 3, 0)> == 6.0F) {
switch(%<LibSFChartInstance(block)>is_CONTROLLER) {
case %<block.SymbolMapping.IN_HOLD>:
%<LibSFChartInstance(block)>is_HOLD = (uint8_T)%<block.SymbolMapping.IN_NO_ACTIVE_CHILD>;
%<LibSFChartInstance(block)>is_CONTROLLER = (uint8_T)%<block.SymbolMapping.IN_NO_ACTIVE_CHILD>;
break;
case %<block.SymbolMapping.IN_TRAJECTORY>:
%<LibSFOutputs(block, 5, 0)> = %<FcnSFGetDSMElementValue(block, 0, "0", 1, "real32_T")>;
%<LibSFOutputs(block, 6, 0)> = %<FcnSFGetDSMElementValue(block, 1, "0", 1, "real32_T")>;
%<FcnSFSetDSMElementValue(block, 2, "0", 1, "uint8_T", "MAX_uint8_T")>%<LibSFOutputs(block, 12, 0)> = 0U;
%<LibSFChartInstance(block)>is_CONTROLLER = (uint8_T)%<block.SymbolMapping.IN_NO_ACTIVE_CHILD>;
break;
}
%<LibSFChartInstance(block)>is_OPERATION = (uint8_T)%<block.SymbolMapping.IN_CONFIG>;
%<LibSFOutputs(block, 9, 0)> = 3U;
%<LibSFOutputs(block, 5, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
%<LibSFOutputs(block, 6, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
} else if(%<LibSFInputs(block, 3, 0)> == 1.0F) {
switch(%<LibSFChartInstance(block)>is_CONTROLLER) {
case %<block.SymbolMapping.IN_HOLD>:
%<LibSFChartInstance(block)>is_HOLD = (uint8_T)%<block.SymbolMapping.IN_NO_ACTIVE_CHILD>;
%<LibSFChartInstance(block)>is_CONTROLLER = (uint8_T)%<block.SymbolMapping.IN_NO_ACTIVE_CHILD>;
break;
case %<block.SymbolMapping.IN_TRAJECTORY>:
%<LibSFOutputs(block, 5, 0)> = %<FcnSFGetDSMElementValue(block, 0, "0", 1, "real32_T")>;
%<LibSFOutputs(block, 6, 0)> = %<FcnSFGetDSMElementValue(block, 1, "0", 1, "real32_T")>;
%<FcnSFSetDSMElementValue(block, 2, "0", 1, "uint8_T", "MAX_uint8_T")>%<LibSFOutputs(block, 12, 0)> = 0U;
%<LibSFChartInstance(block)>is_CONTROLLER = (uint8_T)%<block.SymbolMapping.IN_NO_ACTIVE_CHILD>;
break;
}
%<LibSFChartInstance(block)>is_OPERATION = (uint8_T)%<block.SymbolMapping.IN_PRIMITIVE>;
%<LibSFOutputs(block, 9, 0)> = 1U;
%<LibSFChartInstance(block)>is_PRIMITIVE = (uint8_T)%<block.SymbolMapping.IN_STOPPED>;
%<LibSFOutputs(block, 5, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
%<LibSFOutputs(block, 6, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
%<LibSFOutputs(block, 8, 0)> = 1.0F;
} else {
switch(%<LibSFChartInstance(block)>is_CONTROLLER) {
case %<block.SymbolMapping.IN_HOLD>:
if((%<LibSFInputs(block, 3, 0)> == 9.0F) && (%<LibSFChartInstance(block)>trajectory_ready == 1)) {
%<LibSFChartInstance(block)>is_HOLD = (uint8_T)%<block.SymbolMapping.IN_NO_ACTIVE_CHILD>;
%<LibSFChartInstance(block)>is_CONTROLLER = (uint8_T)%<block.SymbolMapping.IN_TRAJECTORY>;
%<LibSFChartInstance(block)>temporalCounter_i1 = 0U;
%<LibSFOutputs(block, 11, 0)> = 3U;
%<LibSFOutputFcnCall(block, 0)>%<LibSFOutputs(block, 12, 0)> = 1U;
} else {
switch(%<LibSFChartInstance(block)>is_HOLD) {
case %<block.SymbolMapping.IN_HOLD_main>:
if(%<LibSFInputs(block, 5, 0)> == 1) {
if(%<FcnSFGetDSMElementValue(block, 2, "0", 1, "uint8_T")> == 0) {
%<LibSFOutputs(block, 11, 0)> = 1U;
%<LibSFChartInstance(block)>is_HOLD = (uint8_T)%<block.SymbolMapping.IN_NO_ACTIVE_CHILD>;
%<LibSFChartInstance(block)>trajectory_ready = 1U;
%<FcnSFSetDSMElementValue(block, 2, "0", 1, "uint8_T", "MAX_uint8_T")>%<LibSFOutputFcnCall(block, 0)>%<LibSFChartInstance(block)>is_HOLD = (uint8_T)%<block.SymbolMapping.IN_HOLD_main>;
} else if(%<FcnSFGetDSMElementValue(block, 2, "0", 1, "uint8_T")> == 1) {
%<LibSFOutputs(block, 11, 0)> = 2U;
%<LibSFChartInstance(block)>is_HOLD = (uint8_T)%<block.SymbolMapping.IN_NO_ACTIVE_CHILD>;
%<LibSFChartInstance(block)>trajectory_ready = 0U;
%<FcnSFSetDSMElementValue(block, 2, "0", 1, "uint8_T", "MAX_uint8_T")>%<LibSFOutputFcnCall(block, 0)>%<LibSFChartInstance(block)>is_HOLD = (uint8_T)%<block.SymbolMapping.IN_HOLD_main>;
} else if(%<FcnSFGetDSMElementValue(block, 2, "0", 1, "uint8_T")> > 1) {
%<LibSFChartInstance(block)>is_HOLD = (uint8_T)%<block.SymbolMapping.IN_HOLD_wait>;
}
}
break;
case %<block.SymbolMapping.IN_HOLD_wait>:
if(%<FcnSFGetDSMElementValue(block, 2, "0", 1, "uint8_T")> < 2) {
if(%<FcnSFGetDSMElementValue(block, 2, "0", 1, "uint8_T")> == 0) {
%<LibSFOutputs(block, 11, 0)> = 1U;
%<LibSFChartInstance(block)>is_HOLD = (uint8_T)%<block.SymbolMapping.IN_NO_ACTIVE_CHILD>;
%<LibSFChartInstance(block)>trajectory_ready = 1U;
%<FcnSFSetDSMElementValue(block, 2, "0", 1, "uint8_T", "MAX_uint8_T")>%<LibSFOutputFcnCall(block, 0)>%<LibSFChartInstance(block)>is_HOLD = (uint8_T)%<block.SymbolMapping.IN_HOLD_main>;
} else if(%<FcnSFGetDSMElementValue(block, 2, "0", 1, "uint8_T")> == 1) {
%<LibSFOutputs(block, 11, 0)> = 2U;
%<LibSFChartInstance(block)>is_HOLD = (uint8_T)%<block.SymbolMapping.IN_NO_ACTIVE_CHILD>;
%<LibSFChartInstance(block)>trajectory_ready = 0U;
%<FcnSFSetDSMElementValue(block, 2, "0", 1, "uint8_T", "MAX_uint8_T")>%<LibSFOutputFcnCall(block, 0)>%<LibSFChartInstance(block)>is_HOLD = (uint8_T)%<block.SymbolMapping.IN_HOLD_main>;
} else if(%<FcnSFGetDSMElementValue(block, 2, "0", 1, "uint8_T")> > 1) {
%<LibSFChartInstance(block)>is_HOLD = (uint8_T)%<block.SymbolMapping.IN_HOLD_wait>;
}
}
break;
default:
%<LibSFChartInstance(block)>is_HOLD = (uint8_T)%<block.SymbolMapping.IN_HOLD_main>;
break;
}
}
break;
case %<block.SymbolMapping.IN_TRAJECTORY>:
if((%<SLibGetSFEventName()> == CALL_EVENT) && (%<LibSFChartInstance(block)>temporalCounter_i1 == (uint16_T)%<LibBlockParameter(p8, "", "", 0)>)) {
%<LibSFOutputs(block, 5, 0)> = %<FcnSFGetDSMElementValue(block, 0, "0", 1, "real32_T")>;
%<LibSFOutputs(block, 6, 0)> = %<FcnSFGetDSMElementValue(block, 1, "0", 1, "real32_T")>;
%<FcnSFSetDSMElementValue(block, 2, "0", 1, "uint8_T", "MAX_uint8_T")>%<LibSFOutputs(block, 12, 0)> = 0U;
%<LibSFChartInstance(block)>is_CONTROLLER = (uint8_T)%<block.SymbolMapping.IN_HOLD>;
%<LibSFChartInstance(block)>trajectory_ready = 0U;
%<LibSFOutputs(block, 11, 0)> = 4U;
%<LibSFOutputFcnCall(block, 0)>%<LibSFChartInstance(block)>is_HOLD = (uint8_T)%<block.SymbolMapping.IN_HOLD_main>;
}
break;
default:
%<LibSFChartInstance(block)>is_CONTROLLER = (uint8_T)%<block.SymbolMapping.IN_HOLD>;
%<LibSFChartInstance(block)>trajectory_ready = 0U;
%<LibSFOutputs(block, 11, 0)> = 4U;
%<LibSFOutputFcnCall(block, 0)>%<LibSFChartInstance(block)>is_HOLD = (uint8_T)%<block.SymbolMapping.IN_HOLD_main>;
break;
}
}
}
   %closefile chartFcnsBuf
   %return chartFcnsBuf
%endfunction %% ChartFunctions
%function ChartSharedFunctions(block,system) void
   %openfile chartFcnsBuf
   %closefile chartFcnsBuf
   %return chartFcnsBuf
%endfunction %% ChartSharedFunctions
%function Outputs(block,system) void
   %openfile codeBuf
      
{
uint8_T sf_previousEvent;
sf_previousEvent = %<SLibGetSFEventName()>;
%<SLibGetSFEventName()> = CALL_EVENT;
if((%<SLibGetSFEventName()> == CALL_EVENT) && (%<LibSFChartInstance(block)>temporalCounter_i1 < 65535)) {
%<LibSFChartInstance(block)>temporalCounter_i1++;
}
switch(%<LibSFChartInstance(block)>is_c1_MPC_framework) {
case %<block.SymbolMapping.IN_INIT>:
if((%<LibSFInputs(block, 0, 0)> == 1) && (%<LibSFInputs(block, 1, 0)> == 1)) {
%<LibSFChartInstance(block)>is_c1_MPC_framework = (uint8_T)%<block.SymbolMapping.IN_INIT_ACK>;
%<LibSFOutputs(block, 2, 0)> = 0U;
%<LibSFOutputs(block, 1, 0)> = %<LibBlockParameter(p2, "", "", 0)>;
%<LibSFOutputs(block, 3, 0)> = 1U;
}
break;
case %<block.SymbolMapping.IN_INIT_ACK>:
%<block.SymbolMapping.INIT_ACK>(%<LibSFPassThruArgs(block,1)>);
break;
case %<block.SymbolMapping.IN_OPERATION>:
switch(%<LibSFChartInstance(block)>is_OPERATION) {
case %<block.SymbolMapping.IN_BLUETOOTH>:
if(%<LibSFInputs(block, 3, 0)> == 1.0F) {
%<LibSFChartInstance(block)>is_OPERATION = (uint8_T)%<block.SymbolMapping.IN_PRIMITIVE>;
%<LibSFOutputs(block, 9, 0)> = 1U;
%<LibSFChartInstance(block)>is_PRIMITIVE = (uint8_T)%<block.SymbolMapping.IN_STOPPED>;
%<LibSFOutputs(block, 5, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
%<LibSFOutputs(block, 6, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
%<LibSFOutputs(block, 8, 0)> = 1.0F;
} else if(%<LibSFInputs(block, 3, 0)> == 2.0F) {
%<LibSFChartInstance(block)>is_OPERATION = (uint8_T)%<block.SymbolMapping.IN_CONTROLLER>;
%<LibSFOutputs(block, 9, 0)> = 2U;
%<LibSFOutputs(block, 5, 0)> = %<LibSFInputs(block, 4, 0)>;
%<LibSFOutputs(block, 6, 0)> = %<LibSFInputs(block, 4, 1)>;
%<LibSFOutputs(block, 12, 0)> = 0U;
%<LibSFOutputs(block, 7, 0)> = 1.0F;
%<LibSFOutputs(block, 8, 0)> = 1.0F;
%<LibSFChartInstance(block)>is_CONTROLLER = (uint8_T)%<block.SymbolMapping.IN_HOLD>;
%<LibSFChartInstance(block)>trajectory_ready = 0U;
%<LibSFOutputs(block, 11, 0)> = 4U;
%<LibSFOutputFcnCall(block, 0)>%<LibSFChartInstance(block)>is_HOLD = (uint8_T)%<block.SymbolMapping.IN_HOLD_main>;
} else if(%<LibSFInputs(block, 3, 0)> == 6.0F) {
%<LibSFChartInstance(block)>is_OPERATION = (uint8_T)%<block.SymbolMapping.IN_CONFIG>;
%<LibSFOutputs(block, 9, 0)> = 3U;
%<LibSFOutputs(block, 5, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
%<LibSFOutputs(block, 6, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
} else {
%<LibSFOutputs(block, 7, 0)> = 0.0F;
}
break;
case %<block.SymbolMapping.IN_CONFIG>:
if(%<LibSFInputs(block, 3, 0)> == 1.0F) {
%<LibSFChartInstance(block)>is_OPERATION = (uint8_T)%<block.SymbolMapping.IN_PRIMITIVE>;
%<LibSFOutputs(block, 9, 0)> = 1U;
%<LibSFChartInstance(block)>is_PRIMITIVE = (uint8_T)%<block.SymbolMapping.IN_STOPPED>;
%<LibSFOutputs(block, 5, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
%<LibSFOutputs(block, 6, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
%<LibSFOutputs(block, 8, 0)> = 1.0F;
} else if(%<LibSFInputs(block, 3, 0)> == 2.0F) {
%<LibSFChartInstance(block)>is_OPERATION = (uint8_T)%<block.SymbolMapping.IN_CONTROLLER>;
%<LibSFOutputs(block, 9, 0)> = 2U;
%<LibSFOutputs(block, 5, 0)> = %<LibSFInputs(block, 4, 0)>;
%<LibSFOutputs(block, 6, 0)> = %<LibSFInputs(block, 4, 1)>;
%<LibSFOutputs(block, 12, 0)> = 0U;
%<LibSFOutputs(block, 7, 0)> = 1.0F;
%<LibSFOutputs(block, 8, 0)> = 1.0F;
%<LibSFChartInstance(block)>is_CONTROLLER = (uint8_T)%<block.SymbolMapping.IN_HOLD>;
%<LibSFChartInstance(block)>trajectory_ready = 0U;
%<LibSFOutputs(block, 11, 0)> = 4U;
%<LibSFOutputFcnCall(block, 0)>%<LibSFChartInstance(block)>is_HOLD = (uint8_T)%<block.SymbolMapping.IN_HOLD_main>;
} else if(%<LibSFInputs(block, 3, 0)> == 8.0F) {
%<LibSFChartInstance(block)>is_OPERATION = (uint8_T)%<block.SymbolMapping.IN_BLUETOOTH>;
%<LibSFOutputs(block, 9, 0)> = 4U;
%<LibSFOutputs(block, 5, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
%<LibSFOutputs(block, 6, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
} else if(%<LibSFInputs(block, 3, 0)> == 7.0F) {
%<LibSFOutputs(block, 10, 0)> = 4U;
%<LibSFChartInstance(block)>is_OPERATION = (uint8_T)%<block.SymbolMapping.IN_CONFIG>;
%<LibSFOutputs(block, 9, 0)> = 3U;
%<LibSFOutputs(block, 5, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
%<LibSFOutputs(block, 6, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
} else if(%<LibSFInputs(block, 3, 0)> == 5.0F) {
%<LibSFOutputs(block, 10, 0)> = 3U;
%<LibSFChartInstance(block)>is_OPERATION = (uint8_T)%<block.SymbolMapping.IN_CONFIG>;
%<LibSFOutputs(block, 9, 0)> = 3U;
%<LibSFOutputs(block, 5, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
%<LibSFOutputs(block, 6, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
} else if(%<LibSFInputs(block, 3, 0)> == 4.0F) {
%<LibSFOutputs(block, 10, 0)> = 2U;
%<LibSFChartInstance(block)>is_OPERATION = (uint8_T)%<block.SymbolMapping.IN_CONFIG>;
%<LibSFOutputs(block, 9, 0)> = 3U;
%<LibSFOutputs(block, 5, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
%<LibSFOutputs(block, 6, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
} else if(%<LibSFInputs(block, 3, 0)> == 3.0F) {
%<LibSFOutputs(block, 10, 0)> = 1U;
%<LibSFChartInstance(block)>is_OPERATION = (uint8_T)%<block.SymbolMapping.IN_CONFIG>;
%<LibSFOutputs(block, 9, 0)> = 3U;
%<LibSFOutputs(block, 5, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
%<LibSFOutputs(block, 6, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
} else {
%<LibSFOutputs(block, 7, 0)> = 0.0F;
%<LibSFOutputs(block, 10, 0)> = 0U;
}
break;
case %<block.SymbolMapping.IN_CONTROLLER>:
%<block.SymbolMapping.CONTROLLER>(%<LibSFPassThruArgs(block,1)>);
break;
case %<block.SymbolMapping.IN_PRIMITIVE>:
if(%<LibSFInputs(block, 3, 0)> == 2.0F) {
switch(%<LibSFChartInstance(block)>is_PRIMITIVE) {
case %<block.SymbolMapping.IN_MOVING>:
%<LibSFChartInstance(block)>is_MOVING = (uint8_T)%<block.SymbolMapping.IN_NO_ACTIVE_CHILD>;
%<LibSFChartInstance(block)>is_PRIMITIVE = (uint8_T)%<block.SymbolMapping.IN_NO_ACTIVE_CHILD>;
break;
case %<block.SymbolMapping.IN_STOPPED>:
%<LibSFOutputs(block, 4, 0)> = 0U;
%<LibSFChartInstance(block)>is_PRIMITIVE = (uint8_T)%<block.SymbolMapping.IN_NO_ACTIVE_CHILD>;
break;
}
%<LibSFChartInstance(block)>is_OPERATION = (uint8_T)%<block.SymbolMapping.IN_CONTROLLER>;
%<LibSFOutputs(block, 9, 0)> = 2U;
%<LibSFOutputs(block, 5, 0)> = %<LibSFInputs(block, 4, 0)>;
%<LibSFOutputs(block, 6, 0)> = %<LibSFInputs(block, 4, 1)>;
%<LibSFOutputs(block, 12, 0)> = 0U;
%<LibSFOutputs(block, 7, 0)> = 1.0F;
%<LibSFOutputs(block, 8, 0)> = 1.0F;
%<LibSFChartInstance(block)>is_CONTROLLER = (uint8_T)%<block.SymbolMapping.IN_HOLD>;
%<LibSFChartInstance(block)>trajectory_ready = 0U;
%<LibSFOutputs(block, 11, 0)> = 4U;
%<LibSFOutputFcnCall(block, 0)>%<LibSFChartInstance(block)>is_HOLD = (uint8_T)%<block.SymbolMapping.IN_HOLD_main>;
} else if(%<LibSFInputs(block, 3, 0)> == 8.0F) {
switch(%<LibSFChartInstance(block)>is_PRIMITIVE) {
case %<block.SymbolMapping.IN_MOVING>:
%<LibSFChartInstance(block)>is_MOVING = (uint8_T)%<block.SymbolMapping.IN_NO_ACTIVE_CHILD>;
%<LibSFChartInstance(block)>is_PRIMITIVE = (uint8_T)%<block.SymbolMapping.IN_NO_ACTIVE_CHILD>;
break;
case %<block.SymbolMapping.IN_STOPPED>:
%<LibSFOutputs(block, 4, 0)> = 0U;
%<LibSFChartInstance(block)>is_PRIMITIVE = (uint8_T)%<block.SymbolMapping.IN_NO_ACTIVE_CHILD>;
break;
}
%<LibSFChartInstance(block)>is_OPERATION = (uint8_T)%<block.SymbolMapping.IN_BLUETOOTH>;
%<LibSFOutputs(block, 9, 0)> = 4U;
%<LibSFOutputs(block, 5, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
%<LibSFOutputs(block, 6, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
} else if(%<LibSFInputs(block, 3, 0)> == 6.0F) {
switch(%<LibSFChartInstance(block)>is_PRIMITIVE) {
case %<block.SymbolMapping.IN_MOVING>:
%<LibSFChartInstance(block)>is_MOVING = (uint8_T)%<block.SymbolMapping.IN_NO_ACTIVE_CHILD>;
%<LibSFChartInstance(block)>is_PRIMITIVE = (uint8_T)%<block.SymbolMapping.IN_NO_ACTIVE_CHILD>;
break;
case %<block.SymbolMapping.IN_STOPPED>:
%<LibSFOutputs(block, 4, 0)> = 0U;
%<LibSFChartInstance(block)>is_PRIMITIVE = (uint8_T)%<block.SymbolMapping.IN_NO_ACTIVE_CHILD>;
break;
}
%<LibSFChartInstance(block)>is_OPERATION = (uint8_T)%<block.SymbolMapping.IN_CONFIG>;
%<LibSFOutputs(block, 9, 0)> = 3U;
%<LibSFOutputs(block, 5, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
%<LibSFOutputs(block, 6, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
} else {
%<LibSFOutputs(block, 7, 0)> = 0.0F;
switch(%<LibSFChartInstance(block)>is_PRIMITIVE) {
case %<block.SymbolMapping.IN_MOVING>:
if(%<LibSFInputs(block, 2, 0)> == 5) {
%<LibSFChartInstance(block)>is_MOVING = (uint8_T)%<block.SymbolMapping.IN_NO_ACTIVE_CHILD>;
%<LibSFChartInstance(block)>is_PRIMITIVE = (uint8_T)%<block.SymbolMapping.IN_STOPPED>;
%<LibSFOutputs(block, 5, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
%<LibSFOutputs(block, 6, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
%<LibSFOutputs(block, 8, 0)> = 1.0F;
} else {
switch(%<LibSFChartInstance(block)>is_MOVING) {
case %<block.SymbolMapping.IN_NEGATIVE_MOV_SEG_1>:
%<LibSFOutputs(block, 5, 0)> = (real32_T)%<LibBlockParameter(p3, "", "", 0)>;
%<LibSFOutputs(block, 8, 0)> = 1.0F;
break;
case %<block.SymbolMapping.IN_NEGATIVE_MOV_SEG_2>:
%<LibSFOutputs(block, 6, 0)> = (real32_T)%<LibBlockParameter(p4, "", "", 0)>;
%<LibSFOutputs(block, 8, 0)> = 1.0F;
break;
case %<block.SymbolMapping.IN_POSITIVE_MOV_SEG_1>:
%<LibSFOutputs(block, 5, 0)> = (real32_T)%<LibBlockParameter(p5, "", "", 0)>;
%<LibSFOutputs(block, 8, 0)> = 1.0F;
break;
case %<block.SymbolMapping.IN_POSITIVE_MOV_SEG_2>:
%<LibSFOutputs(block, 6, 0)> = (real32_T)%<LibBlockParameter(p6, "", "", 0)>;
%<LibSFOutputs(block, 8, 0)> = 1.0F;
break;
}
}
break;
case %<block.SymbolMapping.IN_STOPPED>:
if(%<LibSFInputs(block, 2, 0)> == 4) {
%<LibSFOutputs(block, 4, 0)> = 0U;
%<LibSFChartInstance(block)>is_PRIMITIVE = (uint8_T)%<block.SymbolMapping.IN_MOVING>;
%<LibSFChartInstance(block)>is_MOVING = (uint8_T)%<block.SymbolMapping.IN_NEGATIVE_MOV_SEG_2>;
%<LibSFOutputs(block, 5, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
} else if(%<LibSFInputs(block, 2, 0)> == 3) {
%<LibSFOutputs(block, 4, 0)> = 0U;
%<LibSFChartInstance(block)>is_PRIMITIVE = (uint8_T)%<block.SymbolMapping.IN_MOVING>;
%<LibSFChartInstance(block)>is_MOVING = (uint8_T)%<block.SymbolMapping.IN_NEGATIVE_MOV_SEG_1>;
%<LibSFOutputs(block, 6, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
} else if(%<LibSFInputs(block, 2, 0)> == 2) {
%<LibSFOutputs(block, 4, 0)> = 0U;
%<LibSFChartInstance(block)>is_PRIMITIVE = (uint8_T)%<block.SymbolMapping.IN_MOVING>;
%<LibSFChartInstance(block)>is_MOVING = (uint8_T)%<block.SymbolMapping.IN_POSITIVE_MOV_SEG_2>;
%<LibSFOutputs(block, 5, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
} else if(%<LibSFInputs(block, 2, 0)> == 1) {
%<LibSFOutputs(block, 4, 0)> = 0U;
%<LibSFChartInstance(block)>is_PRIMITIVE = (uint8_T)%<block.SymbolMapping.IN_MOVING>;
%<LibSFChartInstance(block)>is_MOVING = (uint8_T)%<block.SymbolMapping.IN_POSITIVE_MOV_SEG_1>;
%<LibSFOutputs(block, 6, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
} else {
%<LibSFOutputs(block, 5, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
%<LibSFOutputs(block, 6, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
%<LibSFOutputs(block, 8, 0)> = 1.0F;
}
break;
default:
%<LibSFChartInstance(block)>is_PRIMITIVE = (uint8_T)%<block.SymbolMapping.IN_STOPPED>;
%<LibSFOutputs(block, 5, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
%<LibSFOutputs(block, 6, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
%<LibSFOutputs(block, 8, 0)> = 1.0F;
break;
}
}
break;
default:
%<LibSFChartInstance(block)>is_OPERATION = (uint8_T)%<block.SymbolMapping.IN_PRIMITIVE>;
%<LibSFOutputs(block, 9, 0)> = 1U;
%<LibSFChartInstance(block)>is_PRIMITIVE = (uint8_T)%<block.SymbolMapping.IN_STOPPED>;
%<LibSFOutputs(block, 5, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
%<LibSFOutputs(block, 6, 0)> = (real32_T)%<LibBlockParameter(p7, "", "", 0)>;
%<LibSFOutputs(block, 8, 0)> = 1.0F;
break;
}
break;
default:
%<LibSFChartInstance(block)>is_c1_MPC_framework = (uint8_T)%<block.SymbolMapping.IN_INIT>;
%<LibSFOutputs(block, 1, 0)> = %<LibBlockParameter(p1, "", "", 0)>;
%<LibSFOutputs(block, 2, 0)> = 1U;
break;
}
%<SLibGetSFEventName()> = sf_previousEvent;
}
   %closefile codeBuf
   %return codeBuf
%endfunction  %% Outputs
%function InlinedInitializerCode(block,system) Output
   %<SLibResetSFChartInstanceAccessed(block)>\
   %openfile initBodyBuf
      %<LibSFChartInstance(block)>is_OPERATION = 0U;
%<LibSFChartInstance(block)>is_CONTROLLER = 0U;
%<LibSFChartInstance(block)>is_HOLD = 0U;
%<LibSFChartInstance(block)>is_PRIMITIVE = 0U;
%<LibSFChartInstance(block)>is_MOVING = 0U;
%<LibSFChartInstance(block)>is_c1_MPC_framework = 0U;
%<LibSFChartInstance(block)>trajectory_ready = 0U;
%if LibBlockOutputSignalIsInBlockIO(1) || LibBlockOutputSignalStorageClass(1) != "Auto"
%<LibSFOutputs(block, 1, 0)> = 0U;
%endif
%if LibBlockOutputSignalIsInBlockIO(2) || LibBlockOutputSignalStorageClass(2) != "Auto"
%<LibSFOutputs(block, 2, 0)> = 0U;
%endif
%if LibBlockOutputSignalIsInBlockIO(3) || LibBlockOutputSignalStorageClass(3) != "Auto"
%<LibSFOutputs(block, 3, 0)> = 0U;
%endif
%if LibBlockOutputSignalIsInBlockIO(4) || LibBlockOutputSignalStorageClass(4) != "Auto"
%<LibSFOutputs(block, 4, 0)> = 0U;
%endif
%if LibBlockOutputSignalIsInBlockIO(5) || LibBlockOutputSignalStorageClass(5) != "Auto"
%<LibSFOutputs(block, 5, 0)> = 32768.0F;
%endif
%if LibBlockOutputSignalIsInBlockIO(6) || LibBlockOutputSignalStorageClass(6) != "Auto"
%<LibSFOutputs(block, 6, 0)> = 32768.0F;
%endif
%if LibBlockOutputSignalIsInBlockIO(7) || LibBlockOutputSignalStorageClass(7) != "Auto"
%<LibSFOutputs(block, 7, 0)> = 0.0F;
%endif
%if LibBlockOutputSignalIsInBlockIO(8) || LibBlockOutputSignalStorageClass(8) != "Auto"
%<LibSFOutputs(block, 8, 0)> = 0.0F;
%endif
%if LibBlockOutputSignalIsInBlockIO(9) || LibBlockOutputSignalStorageClass(9) != "Auto"
%<LibSFOutputs(block, 9, 0)> = MAX_uint8_T;
%endif
%if LibBlockOutputSignalIsInBlockIO(10) || LibBlockOutputSignalStorageClass(10) != "Auto"
%<LibSFOutputs(block, 10, 0)> = 0U;
%endif
%if LibBlockOutputSignalIsInBlockIO(11) || LibBlockOutputSignalStorageClass(11) != "Auto"
%<LibSFOutputs(block, 11, 0)> = 0U;
%endif
%if LibBlockOutputSignalIsInBlockIO(12) || LibBlockOutputSignalStorageClass(12) != "Auto"
%<LibSFOutputs(block, 12, 0)> = 0U;
%endif
%<LibSFChartInstance(block)>is_c1_MPC_framework = (uint8_T)%<block.SymbolMapping.IN_INIT>;
%<LibSFOutputs(block, 1, 0)> = %<LibBlockParameter(p1, "", "", 0)>;
%<LibSFOutputs(block, 2, 0)> = 1U;

   %closefile initBodyBuf
   %if !WHITE_SPACE(initBodyBuf)
      /* Initialize code for chart: '%<LibGetBlockName(block)>' */
      %<initBodyBuf>\
   %endif
%endfunction


%function EnableUnboundOutputEventsCode(block,system) Output
   %openfile initBodyBuf
      %<LibSFOutputFcnCallInitialize(block, 0)>%<LibSFOutputFcnCallEnable(block, 0)>
   %closefile initBodyBuf
   %if !WHITE_SPACE(initBodyBuf)
      /* Enable code for chart: '%<LibGetBlockName(block)>' */
      %<initBodyBuf>\
   %endif
%endfunction

%function DisableUnboundOutputEventsCode(block,system) Output
   %openfile initBodyBuf
      %<LibSFOutputFcnCallDisable(block, 0)>
   %closefile initBodyBuf
   %if !WHITE_SPACE(initBodyBuf)
      /* Disable code for chart: '%<LibGetBlockName(block)>' */
      %<initBodyBuf>\
   %endif
%endfunction

%function DumpSharedUtils(block,system) void
%endfunction

%function ChartDataMap(block, system) void
  %createrecord ChartDataElements {\
    NumChartData   0 \
    ChartDataDefaults {\
      RecordType   "ChartData"\
      DataTypeIdx  0\
      IsComplex    0\
      IsFixPoint   0\
      With         1\
      Dimensions   [1,1]\
    }\
  }
  %return ChartDataElements
%endfunction
