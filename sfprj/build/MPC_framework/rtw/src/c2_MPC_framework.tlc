%implements "chartSource" "C"
%function ChartConfig(block, system) void
  %createrecord chartConfiguration { ...
          executeAtInitialization  0 ...
  }
  %return chartConfiguration
%endfunction
%function ChartDefines(block,system) void
   %openfile chartConstBuf
   %closefile chartConstBuf
   %return chartConstBuf
%endfunction %% ChartDefines
%function ChartFunctions(block,system) void
   %openfile chartFcnsBuf
     %assign junkVal = LibGenMathFcnCall("abs",FcnGetDataTypeIdFromName("single"),"0.0","")
%assign junkVal = LibGenMathFcnCall("sin",FcnGetDataTypeIdFromName("single"),"0.0","")
%assign junkVal = LibGenMathFcnCall("cos",FcnGetDataTypeIdFromName("single"),"0.0","")
%assign junkVal = LibGenMathFcnCall("sqrt",FcnGetDataTypeIdFromName("single"),"0.0","")
%assign junkVal = LibGenMathFcnCall("pow",FcnGetDataTypeIdFromName("double"),"0.0","0.0")
%assign junkVal = LibGenMathFcnCall("rtIsNaN",FcnGetDataTypeIdFromName("single"),"0.0","")
%assign junkVal = LibGenMathFcnCall("rtIsInf",FcnGetDataTypeIdFromName("single"),"0.0","")
%assign junkVal = LibGenMathFcnCall("atan2",FcnGetDataTypeIdFromName("single"),"0.0","0.0")
         
         
         
         
            
            
            
   %closefile chartFcnsBuf
   %return chartFcnsBuf
%endfunction %% ChartFunctions
%function ChartSharedFunctions(block,system) void
   %openfile chartFcnsBuf
                 %if %<!SFLibLookupUtilityFunction("iekfhdbajekfekfk_atan2")>
                    real32_T iekfhdbajekfekfk_atan2(real32_T eml_Y, real32_T eml_X)
{
real32_T eml_r;
if(((boolean_T)rtIsNaNF(eml_X)) || ((boolean_T)rtIsNaNF(eml_Y))) {
eml_r = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("single"))>;
} else if(((boolean_T)rtIsInfF(eml_Y)) && ((boolean_T)rtIsInfF(eml_X))) {
eml_r = atan2f(phdjopphcjmoekno_sign(eml_Y), phdjopphcjmoekno_sign(eml_X));
} else if((real_T)eml_X == 0.0) {
if((real_T)eml_Y > 0.0) {
eml_r = 1.570796371E+000F;
} else if((real_T)eml_Y < 0.0) {
eml_r = -1.570796371E+000F;
} else {
eml_r = 0.0F;
}
} else {
eml_r = atan2f(eml_Y, eml_X);
}
return eml_r;
}
                    %<SFLibInsertUtilityFunction("iekfhdbajekfekfk_atan2")>
                 %endif
                 %if %<!SFLibLookupUtilityFunction("phdjopphcjmoekno_sign")>
                    real32_T phdjopphcjmoekno_sign(real32_T eml_X)
{
real32_T eml_S;
eml_S = 0.0F;
if((boolean_T)rtIsNaNF(eml_X)) {
return %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("single"))>;
} else if((real_T)eml_X > 0.0) {
return 1.0F;
} else if((real_T)eml_X < 0.0) {
return -1.0F;
}
return eml_S;
}
                    %<SFLibInsertUtilityFunction("phdjopphcjmoekno_sign")>
                 %endif
   %closefile chartFcnsBuf
   %return chartFcnsBuf
%endfunction %% ChartSharedFunctions
%function Outputs(block,system) void
   %openfile codeBuf
      
{
real32_T eml_y;
real32_T eml_al1;
uint8_T eml_error;
real32_T eml_al1_1;
eml_y = sqrtf((real32_T)pow((real_T)%<LibSFInputs(block, 0, 0)>, 2.0) + (real32_T)pow((real_T)%<LibSFInputs(block, 1, 0)>, 2.0));
if((eml_y > %<LibSFInputs(block, 4, 0)> + %<LibSFInputs(block, 5, 0)>) || (eml_y < %<LibSFInputs(block, 4, 0)> - %<LibSFInputs(block, 5, 0)>)) {
eml_al1 = %<LibSFInputs(block, 2, 0)>;
eml_y = %<LibSFInputs(block, 3, 0)>;
eml_error = 1U;
} else {
eml_y = %<LibSFInputs(block, 4, 0)> + %<LibSFInputs(block, 5, 0)> * (((((real32_T)pow((real_T)%<LibSFInputs(block, 0, 0)>, 2.0) + (real32_T)pow((real_T)%<LibSFInputs(block, 1, 0)>, 2.0)) - (real32_T)pow((real_T)%<LibSFInputs(block, 4, 0)>, 2.0)) - (real32_T)pow((real_T)%<LibSFInputs(block, 5, 0)>, 2.0)) / (2.0F * %<LibSFInputs(block, 4, 0)> * %<LibSFInputs(block, 5, 0)>));
eml_al1_1 = iekfhdbajekfekfk_atan2((eml_y * %<LibSFInputs(block, 1, 0)> + %<LibSFInputs(block, 0, 0)> * sqrtf(((real32_T)pow((real_T)%<LibSFInputs(block, 0, 0)>, 2.0) + (real32_T)pow((real_T)%<LibSFInputs(block, 1, 0)>, 2.0)) - (real32_T)pow((real_T)eml_y, 2.0))) / ((real32_T)pow((real_T)%<LibSFInputs(block, 0, 0)>, 2.0) + (real32_T)pow((real_T)%<LibSFInputs(block, 1, 0)>, 2.0)), (eml_y * %<LibSFInputs(block, 0, 0)> - %<LibSFInputs(block, 1, 0)> * sqrtf(((real32_T)pow((real_T)%<LibSFInputs(block, 0, 0)>, 2.0) + (real32_T)pow((real_T)%<LibSFInputs(block, 1, 0)>, 2.0)) - (real32_T)pow((real_T)eml_y, 2.0))) / ((real32_T)pow((real_T)%<LibSFInputs(block, 0, 0)>, 2.0) + (real32_T)pow((real_T)%<LibSFInputs(block, 1, 0)>, 2.0)));
eml_y = iekfhdbajekfekfk_atan2((eml_y * %<LibSFInputs(block, 1, 0)> - %<LibSFInputs(block, 0, 0)> * sqrtf(((real32_T)pow((real_T)%<LibSFInputs(block, 0, 0)>, 2.0) + (real32_T)pow((real_T)%<LibSFInputs(block, 1, 0)>, 2.0)) - (real32_T)pow((real_T)eml_y, 2.0))) / ((real32_T)pow((real_T)%<LibSFInputs(block, 0, 0)>, 2.0) + (real32_T)pow((real_T)%<LibSFInputs(block, 1, 0)>, 2.0)), (eml_y * %<LibSFInputs(block, 0, 0)> + %<LibSFInputs(block, 1, 0)> * sqrtf(((real32_T)pow((real_T)%<LibSFInputs(block, 0, 0)>, 2.0) + (real32_T)pow((real_T)%<LibSFInputs(block, 1, 0)>, 2.0)) - (real32_T)pow((real_T)eml_y, 2.0))) / ((real32_T)pow((real_T)%<LibSFInputs(block, 0, 0)>, 2.0) + (real32_T)pow((real_T)%<LibSFInputs(block, 1, 0)>, 2.0)));
if(fabsf(%<LibSFInputs(block, 2, 0)> - eml_al1_1) < fabsf(%<LibSFInputs(block, 2, 0)> - eml_y)) {
eml_al1 = eml_al1_1;
eml_y = iekfhdbajekfekfk_atan2((%<LibSFInputs(block, 1, 0)> - %<LibSFInputs(block, 4, 0)> * sinf(eml_al1_1)) / %<LibSFInputs(block, 5, 0)>, (%<LibSFInputs(block, 0, 0)> - %<LibSFInputs(block, 4, 0)> * cosf(eml_al1_1)) / %<LibSFInputs(block, 5, 0)>) - eml_al1_1;
} else {
eml_al1 = eml_y;
eml_y = iekfhdbajekfekfk_atan2((%<LibSFInputs(block, 1, 0)> - %<LibSFInputs(block, 4, 0)> * sinf(eml_y)) / %<LibSFInputs(block, 5, 0)>, (%<LibSFInputs(block, 0, 0)> - %<LibSFInputs(block, 4, 0)> * cosf(eml_y)) / %<LibSFInputs(block, 5, 0)>) - eml_y;
}
eml_error = 0U;
}
%<LibSFOutputs(block, 1, 0)> = eml_al1;
%<LibSFOutputs(block, 2, 0)> = eml_y;
%<LibSFOutputs(block, 3, 0)> = eml_error;
}
   %closefile codeBuf
   %return codeBuf
%endfunction  %% Outputs
%function InlinedInitializerCode(block,system) Output
   %<SLibResetSFChartInstanceAccessed(block)>\
   %openfile initBodyBuf
      
   %closefile initBodyBuf
   %if !WHITE_SPACE(initBodyBuf)
      /* Initialize code for chart: '%<LibGetBlockName(block)>' */
      %<initBodyBuf>\
   %endif
%endfunction


%function EnableUnboundOutputEventsCode(block,system) Output
   %openfile initBodyBuf
      
   %closefile initBodyBuf
   %if !WHITE_SPACE(initBodyBuf)
      /* Enable code for chart: '%<LibGetBlockName(block)>' */
      %<initBodyBuf>\
   %endif
%endfunction

%function DisableUnboundOutputEventsCode(block,system) Output
   %openfile initBodyBuf
      
   %closefile initBodyBuf
   %if !WHITE_SPACE(initBodyBuf)
      /* Disable code for chart: '%<LibGetBlockName(block)>' */
      %<initBodyBuf>\
   %endif
%endfunction

%function DumpSharedUtils(block,system) void
%endfunction

%function ChartDataMap(block, system) void
  %createrecord ChartDataElements {\
    NumChartData   0 \
    ChartDataDefaults {\
      RecordType   "ChartData"\
      DataTypeIdx  0\
      IsComplex    0\
      IsFixPoint   0\
      With         1\
      Dimensions   [1,1]\
    }\
  }
  %return ChartDataElements
%endfunction
