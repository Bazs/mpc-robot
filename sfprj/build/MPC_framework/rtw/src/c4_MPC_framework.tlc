%implements "chartSource" "C"
%function ChartConfig(block, system) void
  %createrecord chartConfiguration { ...
          executeAtInitialization  0 ...
  }
  %return chartConfiguration
%endfunction
%function ChartDefines(block,system) void
   %openfile chartConstBuf
   %closefile chartConstBuf
   %return chartConstBuf
%endfunction %% ChartDefines
%function ChartFunctions(block,system) void
   %openfile chartFcnsBuf
     %assign junkVal = LibGenMathFcnCall("pow",FcnGetDataTypeIdFromName("double"),"0.0","0.0")
         
         
         
         
            
            
            
   %closefile chartFcnsBuf
   %return chartFcnsBuf
%endfunction %% ChartFunctions
%function ChartSharedFunctions(block,system) void
   %openfile chartFcnsBuf
   %closefile chartFcnsBuf
   %return chartFcnsBuf
%endfunction %% ChartSharedFunctions
%function Outputs(block,system) void
   %openfile codeBuf
      
{
real_T eml_t_sim;
real_T eml_em_dv0[6];
real_T eml_em_dv1[6];
real_T eml_em_dv2[6];
int32_T eml_em_i0;
real_T eml_em_dv3[18];
real_T eml_a0[6];
real_T eml_Q[3];
int32_T eml_em_i1;
eml_t_sim = %<LibSFInputs(block, 6, 0)>;
if(%<LibSFInputs(block, 6, 0)> >= %<LibSFInputs(block, 7, 0)>) {
/* %<" This block supports an embeddable subset of the MATLAB language."> */
/* %<" See the help menu for details. "> */
eml_t_sim = %<LibSFInputs(block, 7, 0)>;
}
eml_em_dv0[0] = pow(eml_t_sim, 5.0) / 20.0;
eml_em_dv0[1] = pow(eml_t_sim, 4.0) / 12.0;
eml_em_dv0[2] = pow(eml_t_sim, 3.0) / 6.0;
eml_em_dv0[3] = pow(eml_t_sim, 2.0) / 2.0;
eml_em_dv0[4] = eml_t_sim;
eml_em_dv0[5] = 1.0;
eml_em_dv1[0] = pow(eml_t_sim, 4.0) / 4.0;
eml_em_dv1[1] = pow(eml_t_sim, 3.0) / 3.0;
eml_em_dv1[2] = pow(eml_t_sim, 2.0) / 2.0;
eml_em_dv1[3] = eml_t_sim;
eml_em_dv1[4] = 1.0;
eml_em_dv1[5] = 0.0;
eml_em_dv2[0] = pow(eml_t_sim, 3.0);
eml_em_dv2[1] = pow(eml_t_sim, 2.0);
eml_em_dv2[2] = eml_t_sim;
eml_em_dv2[3] = 1.0;
eml_em_dv2[4] = 0.0;
eml_em_dv2[5] = 0.0;
for(eml_em_i0 = 0; eml_em_i0 < 6; eml_em_i0++) {
eml_em_dv3[3 * eml_em_i0] = eml_em_dv0[eml_em_i0];
eml_em_dv3[1 + 3 * eml_em_i0] = eml_em_dv1[eml_em_i0];
eml_em_dv3[2 + 3 * eml_em_i0] = eml_em_dv2[eml_em_i0];
}
eml_a0[0] = %<LibSFInputs(block, 0, 0)>;
eml_a0[1] = %<LibSFInputs(block, 1, 0)>;
eml_a0[2] = %<LibSFInputs(block, 2, 0)>;
eml_a0[3] = %<LibSFInputs(block, 3, 0)>;
eml_a0[4] = %<LibSFInputs(block, 4, 0)>;
eml_a0[5] = %<LibSFInputs(block, 5, 0)>;
for(eml_em_i0 = 0; eml_em_i0 < 3; eml_em_i0++) {
eml_Q[eml_em_i0] = 0.0;
for(eml_em_i1 = 0; eml_em_i1 < 6; eml_em_i1++) {
eml_Q[eml_em_i0] += eml_em_dv3[eml_em_i0 + 3 * eml_em_i1] * eml_a0[eml_em_i1];
}
}
%<LibSFOutputs(block, 1, 0)> = eml_Q[0];
%<LibSFOutputs(block, 2, 0)> = eml_Q[1];
%<LibSFOutputs(block, 3, 0)> = eml_Q[2];
}
   %closefile codeBuf
   %return codeBuf
%endfunction  %% Outputs
%function InlinedInitializerCode(block,system) Output
   %<SLibResetSFChartInstanceAccessed(block)>\
   %openfile initBodyBuf
      
   %closefile initBodyBuf
   %if !WHITE_SPACE(initBodyBuf)
      /* Initialize code for chart: '%<LibGetBlockName(block)>' */
      %<initBodyBuf>\
   %endif
%endfunction


%function EnableUnboundOutputEventsCode(block,system) Output
   %openfile initBodyBuf
      
   %closefile initBodyBuf
   %if !WHITE_SPACE(initBodyBuf)
      /* Enable code for chart: '%<LibGetBlockName(block)>' */
      %<initBodyBuf>\
   %endif
%endfunction

%function DisableUnboundOutputEventsCode(block,system) Output
   %openfile initBodyBuf
      
   %closefile initBodyBuf
   %if !WHITE_SPACE(initBodyBuf)
      /* Disable code for chart: '%<LibGetBlockName(block)>' */
      %<initBodyBuf>\
   %endif
%endfunction

%function DumpSharedUtils(block,system) void
%endfunction

%function ChartDataMap(block, system) void
  %createrecord ChartDataElements {\
    NumChartData   0 \
    ChartDataDefaults {\
      RecordType   "ChartData"\
      DataTypeIdx  0\
      IsComplex    0\
      IsFixPoint   0\
      With         1\
      Dimensions   [1,1]\
    }\
  }
  %return ChartDataElements
%endfunction
